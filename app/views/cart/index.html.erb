<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gi·ªè h√†ng</title>
  <%= csrf_meta_tags %>
  <%= stylesheet_link_tag 'cart', media: 'all' %>
</head>
<body>
  
  <div class="cart-container">
  <h1>Gi·ªè h√†ng c·ªßa b·∫°n</h1>

  <% if current_user.giohang.present? && !JSON.parse(current_user.giohang).empty? %>
    <% cart = JSON.parse(current_user.giohang) %>
    <% total_price = 0 %> <!-- Bi·∫øn l∆∞u t·ªïng gi√° tr·ªã ƒë∆°n h√†ng -->
    <table>
      <thead>
        <tr>
          <th class="select-all"><input type="checkbox" id="selectAll" onchange="toggleSelectAll(this)"></th>
          <th class="sp">S·∫£n ph·∫©m</th>
          <th class="sl">S·ªë l∆∞·ª£ng</th>
          <th class="giac">Gi√°</th>
          <th class="giac"></th>
        </tr>
      </thead>
    <tbody>
      <% cart.each do |product_name, quantity| %>
        <% product = Sanpham.find_by(ten: product_name) %>
        <% product_price = (product.gia * quantity).round(2) %> <!-- T√≠nh gi√° t·ª´ng s·∫£n ph·∫©m -->
        <% total_price += product_price %> <!-- C·ªông v√†o t·ªïng gi√° -->

        <tr>
          <td class="select-product">
            <input type="checkbox" class="product-checkbox" data-product="<%= product_name %>">
          </td>
          <td>
            <div class="product-info">
              <img src="<%= asset_path(product.hinhanh) %>" alt="<%= product_name %>" class="product-image">
              <span><%= product_name %></span>
            </div>
          </td>
          <td class="sl">
            <% don_vi = product.donvi %> <!-- L·∫•y ƒë∆°n v·ªã c·ªßa s·∫£n ph·∫©m -->
            <% max_quantity = product.soluong %> <!-- L·∫•y s·ªë l∆∞·ª£ng t·ªëi ƒëa t·ª´ b·∫£ng Sanpham -->
            <span class="kg"><%= "#{quantity.to_i} #{don_vi}" %></span>
          </td>
          <td class="giac">
            <span class="price">
              <%= CurrencyFormatter.format_vnd(product_price) %>
            </span>
          </td>
          <td class="giac">
            <div class="quantity-actions">
              <button type="button" 
                  class="update-btn" 
                  data-product="<%= product_name %>" 
                  data-quantity="<%= quantity %>"
                  data-max-quantity="<%= max_quantity %>"
                  data-image="<%= asset_path(product.hinhanh) %>"
                  data-unit="<%= product.donvi %>"
                  onclick="openUpdateModal(this)">‚Ü∫
              </button>
              <button type="button" class="remove-btn" data-product="<%= product_name %>" title="X√≥a">
                üóëÔ∏è
              </button>
            </div>
          </td>
        </tr>
      <% end %>
    </tbody>

      <tfoot>
        <tr>
          <td colspan="3" class="total-label">T·ªïng c·ªông:</td>
          <td class="total-price">
            <%= CurrencyFormatter.format_vnd(total_price) %>
          </td>
        </tr>
      </tfoot>
    </table>
  <% else %>
    <p class="empty-cart">Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.</p>
  <% end %>

  <!-- Hi·ªÉn th·ªã n√∫t ƒë·∫∑t h√†ng n·∫øu gi·ªè h√†ng kh√¥ng tr·ªëng -->
  <% if current_user.giohang.present? && !JSON.parse(current_user.giohang).empty? %>
    <button class="order-button" type="button" onclick="redirectToOrderPage()">üõí ƒê·∫∑t h√†ng</button>
  <% else %>
    <button class="order-button" type="button" disabled>üõí Gi·ªè h√†ng tr·ªëng</button>
  <% end %>


</div>


 <!-- Modal "C·∫≠p nh·∫≠t s·∫£n ph·∫©m" -->
<div id="updateProductModal" class="modal" style="display: none;">
  <div class="modal-contentt">
    <span class="close-button" onclick="closeUpdateProductModal()">√ó</span>
    <!-- Hi·ªÉn th·ªã s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn -->
    <div id="updateProductPreview">
      <img id="updateProductImage" src="" alt="S·∫£n ph·∫©m" class="product-image">
      <h3 id="updateProductName"></h3>
    </div>
    <p id="stockInfo" style="text-align: center; font-weight: bold; color: #333;"></p>
    <!-- Thanh tr∆∞·ª£t ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng -->
    <p>Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b·∫°n mu·ªën c·∫≠p nh·∫≠t:</p>
    <input type="range" id="updateQuantitySlider" min="1" max="20" step="1" value="1" oninput="updateUpdateQuantityDisplay(this.value)" data-unit="kg">
    <p>S·ªë l∆∞·ª£ng: <span id="updateQuantityDisplay">1 kg</span></p>
    <%= button_tag 'X√°c nh·∫≠n', class: 'btn btn-primary confirm-btn', onclick: "confirmUpdateProduct()" %>
  </div>
</div>



<script>  
  function redirectToOrderPage() {
    const selectedProducts = getSelectedProducts();

    if (selectedProducts.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng.');
        return;
    }

    // G·ª≠i danh s√°ch s·∫£n ph·∫©m ƒë√£ ch·ªçn qua AJAX ƒë·ªÉ l∆∞u v√†o session
    fetch('/set_selected_products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        },
        body: JSON.stringify({ selected_products: selectedProducts }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t h√†ng
            window.location.href = '/order';
        } else {
            alert('C√≥ l·ªói x·∫£y ra khi l∆∞u danh s√°ch s·∫£n ph·∫©m.');
        }
    })
    .catch(error => {
        console.error('L·ªói:', error);
        alert('Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu.');
    });
}


  function getSelectedProducts() {
    const selectedProducts = [];
    const productCheckboxes = document.querySelectorAll(".product-checkbox:checked");
    productCheckboxes.forEach((checkbox) => {
      const productName = checkbox.getAttribute("data-product");
      selectedProducts.push(productName);
    });
    return selectedProducts;
  }





///////////
  function toggleSelectAll(selectAllCheckbox) {
     // L·∫•y t·∫•t c·∫£ c√°c checkbox con
    const checkboxes = document.querySelectorAll(".product-checkbox");
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ c√°c checkbox con d·ª±a tr√™n tr·∫°ng th√°i c·ªßa "Ch·ªçn t·∫•t c·∫£"
    checkboxes.forEach((checkbox) => {
      checkbox.checked = selectAllCheckbox.checked;
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    // L·∫•y t·∫•t c·∫£ checkbox con v√† checkbox "Ch·ªçn t·∫•t c·∫£"
    const selectAllCheckbox = document.getElementById("selectAll");
    const checkboxes = document.querySelectorAll(".product-checkbox");

    // G√°n s·ª± ki·ªán thay ƒë·ªïi cho t·∫•t c·∫£ checkbox con
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", () => {
        // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ checkbox con ƒë·ªÅu ƒë∆∞·ª£c ch·ªçn
        const allChecked = Array.from(checkboxes).every((cb) => cb.checked);
        // N·∫øu t·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c ch·ªçn, "Ch·ªçn t·∫•t c·∫£" c≈©ng ƒë∆∞·ª£c ch·ªçn
        selectAllCheckbox.checked = allChecked;
        // N·∫øu c√≥ b·∫•t k·ª≥ checkbox con n√†o b·ªã b·ªè ch·ªçn, b·ªè ch·ªçn "Ch·ªçn t·∫•t c·∫£"
        if (!checkbox.checked) {
          selectAllCheckbox.checked = false;
        }
      });
    });
  });






  
  document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".remove-btn").forEach((button) => {
    button.addEventListener("click", function () {
      const productName = this.getAttribute("data-product");

      // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
      const confirmDelete = confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m "${productName}" kh·ªèi gi·ªè h√†ng kh√¥ng?`);

      if (confirmDelete) {
        // G·ª≠i y√™u c·∫ßu x√≥a s·∫£n ph·∫©m n·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n
        fetch("/cart/remove_from_cart", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content")
          },
          body: JSON.stringify({ product_name: productName })
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // C·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng
              alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!");
              location.reload(); // Refresh trang ƒë·ªÉ hi·ªÉn th·ªã gi·ªè h√†ng m·ªõi
            } else {
              alert(data.error || "C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi m√°y ch·ªß.");
          });
      }
    });
  });
});


  function openUpdateModal(button) {
    const productName = button.getAttribute("data-product");
    const productImage = button.getAttribute("data-image");
    const currentQuantity =parseInt(button.getAttribute("data-quantity"));
    const maxQuantity = parseInt(button.getAttribute("data-max-quantity")); // L·∫•y s·ªë l∆∞·ª£ng t·ªëi ƒëa
    const productUnit = button.getAttribute("data-unit"); // L·∫•y ƒë∆°n v·ªã s·∫£n ph·∫©m

    // C·∫≠p nh·∫≠t n·ªôi dung modal
    document.getElementById("updateProductName").textContent = productName;
    document.getElementById("updateProductImage").src = productImage;
    document.getElementById("updateQuantitySlider").value = currentQuantity;
    document.getElementById("updateQuantitySlider").max = maxQuantity; // ƒê·∫∑t gi√° tr·ªã t·ªëi ƒëa cho slider
    document.getElementById("updateQuantityDisplay").textContent = `${currentQuantity} ${productUnit}`; // Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng v√† ƒë∆°n v·ªã

    // L∆∞u ƒë∆°n v·ªã v√†o thu·ªôc t√≠nh c·ªßa slider ƒë·ªÉ s·ª≠ d·ª•ng khi c·∫≠p nh·∫≠t
    document.getElementById("updateQuantitySlider").setAttribute("data-unit", productUnit);
    document.getElementById("stockInfo").textContent = `S·ªë l∆∞·ª£ng c√≥ s·∫µn: ${maxQuantity} ${productUnit}`; 


    // Hi·ªÉn th·ªã modal
    document.getElementById("updateProductModal").style.display = "block";
  }


  // ƒê√≥ng modal c·∫≠p nh·∫≠t s·∫£n ph·∫©m
  function closeUpdateProductModal() {
    document.getElementById("updateProductModal").style.display = "none";
  }

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng hi·ªÉn th·ªã khi k√©o slider
  function updateUpdateQuantityDisplay(value) {
    const productUnit = document.getElementById("updateQuantitySlider").getAttribute("data-unit"); // L·∫•y ƒë∆°n v·ªã s·∫£n ph·∫©m
    const roundedValue = parseInt(value); // Chuy·ªÉn ƒë·ªïi s·ªë l∆∞·ª£ng th√†nh s·ªë nguy√™n
    document.getElementById("updateQuantityDisplay").textContent = `${roundedValue} ${productUnit}`;
  }


  // X√°c nh·∫≠n c·∫≠p nh·∫≠t s·∫£n ph·∫©m
  function confirmUpdateProduct() {
    const productName = document.getElementById("updateProductName").textContent;
    const newQuantity = document.getElementById("updateQuantitySlider").value;

    fetch("/cart/update_cart", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content")
      },
      body: JSON.stringify({ product_name: productName, quantity: newQuantity })
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
          location.reload(); // L√†m m·ªõi trang ƒë·ªÉ hi·ªÉn th·ªã gi·ªè h√†ng m·ªõi
        } else {
          alert(data.error || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m.");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        alert("C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi m√°y ch·ªß.");
      });

    closeUpdateProductModal(); // ƒê√≥ng modal
  }

  


</script>

</body>
</html>
